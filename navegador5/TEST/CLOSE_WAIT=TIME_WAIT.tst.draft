
#in Connection keep-alive:
#CLOSE_WAIT TEST####################################################################
info_container,records_container = nvsoli.keepalive_init("http://www.baidu.com")
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
del info_container['req_head']['Connection'] 
info_container['url'] = "http://www.baidu.com"
info_container = nvsoli.walkon(info_container,records_container=records_container)
src_ip,src_port,dst_ip,dst_port = nvsoli.getipport_from_conn(info_container['conn'])
pobj(info_container['req_head'])
pobj(info_container['resp_head'])


show = nvsoli.linux_record_state_change_via_ipport(src_ip,src_port,dst_ip,dst_port)


#548	138.940359000	121.29.8.170	192.168.75.128	TCP	54	http > 33815 [FIN, PSH, ACK] Seq=15816 Ack=364 Win=64240 Len=0
#549	138.977893000	192.168.75.128	121.29.8.170	TCP	60	33815 > http [ACK] Seq=364 Ack=15817 Win=59860 Len=0

# root@ubuntu:~# netstat | egrep "(https|http)"
# tcp        1      0 192.168.75.128:33815    121.29.8.170:http       CLOSE_WAIT
# root@ubuntu:~# netstat | egrep "(https|http)"
# tcp        1      0 192.168.75.128:33815    121.29.8.170:http       CLOSE_WAIT
# root@ubuntu:~# netstat | egrep "(https|http)"
# tcp        1      0 192.168.75.128:33815    121.29.8.170:http       CLOSE_WAIT
# root@ubuntu:~# netstat | egrep "(https|http)"
# tcp        1      0 192.168.75.128:33815    121.29.8.170:http       CLOSE_WAIT
# root@ubuntu:~#

# 1.在主动进行关闭连接的一端，如果closesocket，则会主动发送FIN包，FIN包表示这一方向上的数据不会再有的了。然后主动发起的这一端开始等待对方的ACK和FIN包，进行状态的两次迁移。
# 2.被动收到的FIN包的这一被动关闭连接的一端，先会回一个AcK表示准备去断开连接的。然后如果当前有数据还在缓冲区里的，会将缓冲区里的数据处理完，然后再发FIN包，表示数据已处理完。这里的FIN包，显然是需要调动closesocket来主动关闭的，shutdown调动没试过，不瞎说。

#############################################
# >>> info_container['conn'].sock.recv(1024)#
# b''                                       #
# >>>                                       #
#############################################

# 3.上述步骤2中，如果读buffer中有数据，迟迟不处理，且不调用closesocket则有可能会导致无法发送fin包，状态会一直维持在CLOSE_WAIT状态，直至超时，发送RST？连接快速tear down。
# 4.如果读buffer中有数据，即使不处理，不读取，只要调用closesocket，仍然可以迅速的发送FIN包断开连接。
# 5.但是shutdown是用于优雅关闭的，即如果关闭时有未发送的数据，则先发送完再发FIN包关闭，若有没有接收处理完的则向对端发送RST包重建连接，接收完后。
# closesocket是否是优雅关闭，需要看so_linger的设置，若l_linger设置为非0，则作为限制其在该时间段内发送或者接收处理完的期限，否则强制关闭；l_onoff为0，则表示是优雅关闭，非零才有可能是强制关闭。(未验证)


info_container,records_container = nvsoli.keepalive_init("http://www.ttlsa.com/monitor/zabbix/")
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
del info_container['req_head']['Connection'] 
info_container['url'] = "http://www.ttlsa.com/monitor/zabbix/"
info_container = nvsoli.walkon(info_container,records_container=records_container)
src_ip,src_port,dst_ip,dst_port = nvsoli.getipport_from_conn(info_container['conn'])
pobj(info_container['req_head'])
pobj(info_container['resp_head'])
show = nvsoli.linux_record_state_change_via_ipport(src_ip,src_port,dst_ip,dst_port)
info_container = nvsoli.walkon(info_container,records_container=records_container)
############################################################################################
#================================================================================================


#in keepalive
######################server send RST,ACK ##################################
#client will in _REMOTE_NONE

info_container,records_container = nvsoli.keepalive_init(urls['base'])
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
info_container['url'] = urls['base']
info_container = nvsoli.walkon(info_container,records_container=records_container)
src_ip,src_port,dst_ip,dst_port = nvsoli.getipport_from_conn(info_container['conn'])
show = nvsoli.linux_record_state_change_via_ipport(src_ip,src_port,dst_ip,dst_port)
# wait  and CTRL+C 
info_container = nvsoli.walkon(info_container,records_container=records_container)
#####################server send RST,ACK ########################################



# in Connection keep-alive  client do explicit close  this will cause info_container['conn'].sock == None
info_container,records_container = nvsoli.keepalive_init(urls['base'])
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
info_container['url'] = urls['base']
info_container = nvsoli.walkon(info_container,records_container=records_container)
src_ip,src_port,dst_ip,dst_port = nvsoli.getipport_from_conn(info_container['conn'])
info_container['conn'].close()
show = nvsoli.linux_record_state_change_via_ipport(src_ip,src_port,dst_ip,dst_port)
# wait  and CTRL+C 
info_container = nvsoli.walkon(info_container,records_container=records_container)



#same as upper 
info_container,records_container = nvsoli.keepalive_init(urls['base'])
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
info_container['url'] = urls['base']
info_container = nvsoli.walkon(info_container,records_container=records_container)
src_ip,src_port,dst_ip,dst_port = nvsoli.getipport_from_conn(info_container['conn'])
nvsoli.shutdown(info_container)
show = nvsoli.linux_record_state_change_via_ipport(src_ip,src_port,dst_ip,dst_port)
# wait  and CTRL+C 
info_container = nvsoli.walkon(info_container,records_container=records_container)


############
#============================================================================




#######Connection close#############

info_container,records_container = nvsoli.keepalive_init(urls['base'])
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
info_container['req_head']['Connection'] = 'close'
info_container['url'] = urls['base']
info_container = nvsoli.walkon(info_container,records_container=records_container)
pobj(info_container['req_head'])
pobj(info_container['resp_head'])
#wait and CTRL+C   should be empty  output 
info_container['conn'].sock
info_container = nvsoli.walkon(info_container,records_container=records_container)
##############################################
#===============================================


######################







#################the original http.client lib##############################
conn = http.client.HTTPSConnection("www.python.org")
conn.request("GET", "/")
r1 = conn.getresponse()
print(r1.status, r1.reason)   

info_container,records_container = nvsoli.keepalive_init("https://www.python.org")
info_container['req_head']['Upgrade-Insecure-Requests'] = 1
info_container['url'] = "https://www.python.org"
info_container = nvsoli.walkon(info_container,records_container=records_container)

import http
impott http.client
conn = http.client.HTTPSConnection("www.immigration.govt.nz")
conn.request("GET", "/")
r1 = conn.getresponse()
print(r1.status, r1.reason)   
show = nvsoli.linux_record_state_change(conn)
pobj(show)
###################the original http.client lib##########################   
    
    



















#####
#这个server 5 分钟后会主动send RST,ACK
# >>> show = nvsoli.linux_record_state_change(conn)
# from  to ESTABLISHED afte 0.014894962310791016 secs
# 300.22582030296326seconds elapsed finally
# >>> pobj(show)
# [
 # (
  # '',
  # 0
 # ),
 # (
  # 'ESTABLISHED',
  # 0.014894962310791016
 # ),
 # (
  # '',
  # 300.21092534065247
 # )
# ]
# >>>
# RST报文段不会导致另一端产生任何响应，另一端根本不进行确认。收到RST的一方将终止该连接。程序行为如下：
# 阻塞模型下，内核无法主动通知应用层出错，只有应用层主动调用read()或者write()这样的IO系统调用时，内核才会利用出错来通知应用层对端RST。
# 非阻塞模型下，select或者epoll会返回sockfd可读,应用层对其进行读取时，read()会报错RST
# 如果调用conn.close() 则客户端主动发送 FIN,ACK 进入TIME_WAIT,服务器端回复ACK,  FIN,PUSH,ACK
# from  to FIN_WAIT2 afte 0.011529207229614258 secs
# from FIN_WAIT2 to TIME_WAIT afte 1.0149478912353516 secs
# TIME_WAIT
# TIME_WAIT
# TIME_WAIT

# 发送端 : TCP将数据包置上PUSH标志时，表示这个数据应该被立即发送，而不要等待额外的数据。
# 接收端 : 接收端接受到带有PUSH标志的数据时，应该接接受缓存中收到的所有数据（包含当前带PUSH标示的数据包）应该立即提交到应用层。

# 如果调用shutdown
# from  to FIN_WAIT2 afte 0.015313386917114258 secs
# from FIN_WAIT2 to TIME_WAIT afte 1.016911506652832 secs
# TIME_WAIT
# TIME_WAIT
# from TIME_WAIT to  afte 59.58019232749939 secs
# 60.61256194114685seconds elapsed finally
# 在http层面，如果发送时设置Connection:close 并且收到了server 发来的Connection:close , 那么client 会主动close()链接


# 如果client 不带任何头部，如果收到server发来的Connection:keepalive(http1.1正常行为)那么会等待server 发的FIN.PUSH,ACK
# ESTABLISHED
# ESTABLISHED
# from ESTABLISHED to CLOSE_WAIT afte 59.39688277244568 secs
# CLOSE_WAIT
# CLOSE_WAIT

# 当客户端因为某种原因先于服务端发出了FIN信号，就会导致服务端被动关闭，若服务端不主动关闭socket发FIN给Client，
# 此时服务端Socket会处于CLOSE_WAIT状态（而不是LAST_ACK状态）。通常来说，
# 一个CLOSE_WAIT会维持至少2个小时的时间（系统默认超时时间的是7200秒，也就是2小时）。
# 如果服务端程序因某个原因导致系统造成一堆CLOSE_WAIT消耗资源，那么通常是等不到释放那一刻，系统就已崩溃。
# 因此，解决这个问题的方法还可以通过修改TCP/IP的参数来缩短这个时间，于是修改tcp_keepalive_*系列参数： 
# 在close_wait 状态下 python http_client 是 可以 读取的 
# src_ip,src_port,dst_ip,dst_port = nvsoli.getipport_from_conn(info_container['conn'])
# 此时如果不手动关闭那么下次发送会重复使用这条链接
# 为了避免这个情况，keep-alive, 复用前最好做一次检查
# nvsoli.linux_check_tcp_state_via_conn(info_container['conn']) 但是这个手段仅仅针对linux
#####







    
